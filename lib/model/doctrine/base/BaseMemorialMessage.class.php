<?php

/**
 * BaseMemorialMessage
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property string $content
 * @property integer $memorial_id
 * @property Memorial $Memorial
 * 
 * @method string          getName()        Returns the current record's "name" value
 * @method string          getContent()     Returns the current record's "content" value
 * @method integer         getMemorialId()  Returns the current record's "memorial_id" value
 * @method Memorial        getMemorial()    Returns the current record's "Memorial" value
 * @method MemorialMessage setName()        Sets the current record's "name" value
 * @method MemorialMessage setContent()     Sets the current record's "content" value
 * @method MemorialMessage setMemorialId()  Sets the current record's "memorial_id" value
 * @method MemorialMessage setMemorial()    Sets the current record's "Memorial" value
 * 
 * @package    symfonymodel
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseMemorialMessage extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('memorial_message');
        $this->hasColumn('name', 'string', 100, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 100,
             ));
        $this->hasColumn('content', 'string', null, array(
             'type' => 'string',
             'notnull' => true,
             ));
        $this->hasColumn('memorial_id', 'integer', null, array(
             'type' => 'integer',
             ));

        $this->option('type', 'MyISAM');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Memorial', array(
             'local' => 'memorial_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}